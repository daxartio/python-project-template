[tool.poetry]
name = "{{ cookiecutter.project_slug }}"
version = "{{ cookiecutter.version }}"
description = "{{ cookiecutter.description }}"
authors = ["{{ cookiecutter.author }}"]
license = {% if cookiecutter.license == 'MIT' %}"MIT"{% endif %}{% if cookiecutter.license == 'APACHE' %}"Apache-2.0"{% endif %}
readme = "README.md"
repository = "{{ cookiecutter.repository }}"
homepage = "{{ cookiecutter.homepage }}"
keywords = []
{% if cookiecutter.use_cli == 'True' %}
[tool.poetry.scripts]
{{ cookiecutter.project_slug }} = '{{ cookiecutter.pkg_name }}.cli.app:run'
{% endif %}
[tool.poetry.dependencies]
python = "^{{ cookiecutter.python_version }}"

[tool.poetry.group.dev.dependencies]
auto-changelog = "*"
autoflake = "*"
bandit = "*"
black = "*"
codecov = "*"
flake8 = "*"
flake8-annotations-complexity = "*"
flake8-bandit = "*"
flake8-breakpoint = "*"
flake8-bugbear = "*"
flake8-builtins = "*"
flake8-comprehensions = "*"
flake8-eradicate = "*"
flake8-if-expr = "*"
flake8-isort = "*"
flake8-logging-format = "*"
flake8-print = "*"
flake8-pyproject = "*"
flake8-pytest = "*"
flake8-pytest-style = "*"
flake8-requirements = "*"
flake8-return = "*"
flake8-tidy-imports = "*"
mypy = "*"
pep8-naming = "*"{% if cookiecutter.task_runner == "poethepoet" %}
poethepoet = "*"{% endif %}
pylint = "*"
pytest = "*"
pytest-asyncio = "*"
pytest-cov = "*"
pytest-deadfixtures = "*"
pytest-mock = "*"
ruff = "*"
toml = "*"
unify = "*"
{% if cookiecutter.use_docs == 'True' %}
[tool.poetry.group.docs.dependencies]
mkdocs = "*"
mkdocs-material = "*"
{% endif %}
[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
{% if cookiecutter.task_runner == "poethepoet" %}
[tool.poe.env]
CODE = "tests {{ cookiecutter.pkg_name }}"

[tool.poe.tasks.install-poetry]
help = "Install poetry"
cmd = "pip install poetry"

[tool.poe.tasks.install]
help = "Install dependencies"
cmd = "poetry install"

[tool.poe.tasks.install-docs]
help = "Install docs dependencies"
cmd = "poetry install --only docs"

[tool.poe.tasks.all]
help = "Run format lint test"
sequence = ["format", "lint", "test"]
default_item_type = "ref"

[tool.poe.tasks.publish]
help = "Publish package"
cmd = "poetry publish --build --no-interaction --username=${pypi_username} --password=${pypi_password}"
args = ["pypi_username", "pypi_password"]

[tool.poe.tasks.test]
help = "Test with coverage"
cmd = "pytest --cov=./"

[tool.poe.tasks.test-fast]
help = "Test until error"
cmd = "pytest --exitfirst"

[tool.poe.tasks.test-failed]
help = "Test failed"
cmd = "pytest --last-failed"

[tool.poe.tasks.test-report]
help = "Report testing"
sequence = [
    {cmd = "pytest --cov --cov-report html"},
    {cmd = "python -m webbrowser 'htmlcov/index.html'"},
]

[tool.poe.tasks.lint]
help = "Check code"
sequence = [
    {cmd = "ruff ${CODE}"},
    {cmd = "flake8 --jobs 1 --statistics --show-source ${CODE}"},
    {cmd = "pylint --jobs 1 --rcfile=pyproject.toml ${CODE}"},
    {cmd = "bandit -c pyproject.toml -r ${CODE}"},
    {cmd = "black --check ${CODE}"},
    {cmd = "pytest --dead-fixtures --dup-fixtures"},
    {cmd = "mypy ${CODE}"},
]

[tool.poe.tasks.format]
help = "Formatting code"
sequence = [
	{cmd = "ruff --fix ${CODE}"},
	{cmd = "autoflake --recursive --in-place --remove-all-unused-imports ${CODE}"},
	{cmd = "isort ${CODE}"},
	{cmd = "black ${CODE}"},
	{cmd = "unify --in-place --recursive ${CODE}"},
]
{% if cookiecutter.use_docs == 'True' %}
[tool.poe.tasks.docs]
help = "Build docs"
cmd = "mkdocs build -s -v"

[tool.poe.tasks.docs-serve]
help = "Serve docs"
cmd = "mkdocs serve"
{% endif %}

[tool.poe.tasks.bump]
help = "Bump version (commit and tag)"
args = [{name = "version", positional = true, required = true}]
sequence = [
    {cmd = "poetry version ${version}"},
    {cmd = "git add ."},
    {cmd = "git commit -m \"bump: bump version to ${version}\""},
    {cmd = "git tag -m \"\" -a ${version}"},
]

[tool.poe.tasks.clean]
help = "Clean"
sequence = [
	{cmd = "rm -rf site || true"},
	{cmd = "rm -rf dist || true"},
	{cmd = "rm -rf htmlcov || true"},
]
{% endif %}
[tool.mypy]
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
ignore_missing_imports = true
no_implicit_optional = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false

[tool.isort]
profile = "black"

[tool.coverage.run]
omit = ["tests/*", "**/__main__.py", "**/.venv/*", "**/site-packages/*"]
branch = true

[tool.coverage.report]
show_missing = true
skip_covered = true
fail_under = 100

[tool.pylint]
good-names = ["i","j","k","e","x","_","pk","id"]
max-args = 5
max-attributes = 10
max-bool-expr = 5
max-module-lines = 300
max-nested-blocks = 2
max-public-methods = 30
max-returns = 5
max-statements = 30
output-format = "colorized"
ignored-classes = ["contextlib.closing"]
disable = [
    "C0111", # Missing module docstring (missing-docstring)
    "R0901", # Too many ancestors (m/n) (too-many-ancestors)
    "R0903", # Too few public methods (m/n) (too-few-public-methods)
    "R0801", # duplicate-code
]

[tool.black]
skip-string-normalization = true

[tool.pytest.ini_options]
asyncio_mode = "strict"
addopts = "--strict-markers --showlocals --verbosity 2"
log_level = "DEBUG"

[tool.bandit]
exclude_dirs = ["tests"]

[tool.ruff]
line-length = 88
select = [
    "D",
    "B",
    "C",
    "E",
    "F",
    "N",
    "Q",
    "RUF001",
    "T",
    "W",
]
ignore = [
    "D100",
    "D101",
    "D102",
    "D103",
    "D104",
    "D105",
    "D106",
    "D107",
    "D203",
    "D213",
    "B008",
]
exclude = []

[tool.flake8]
enable-extensions = "G"
exclude = [".git", ".venv"]
ignore = [
    "A003", # 'id' is a python builtin, consider renaming the class attribute
    "W503", # line break before binary operator
    "G200", # Logging statement uses exception in arguments
    "PT011", # set the match parameter in pytest.raises({exception})
    "S101", # use of assert detected (useless with pytest)
]
max-complexity = 8
max-line-length = 88
show-source = true
ban-relative-imports = "parents"
